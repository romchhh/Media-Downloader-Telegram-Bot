from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ParseMode
from aiogram.utils.exceptions import ChatNotFound
from main import bot, dp
from data.config import channel_id, administrators
from aiogram.dispatcher import Dispatcher
import asyncio
from filters.filters import IsSubscribed
from keyboards.user_keyboards import get_start_keyboard, get_comunity_keyboard, get_lang_keyboard, get_back, get_back_keyboard
from database.user_db import *
from functions.translate import translate_text
from states.user_states import SupportStates
from aiogram.dispatcher import FSMContext
from functions.user_functions import *
from aiogram.types import InputMediaPhoto, InputMediaVideo
import shutil
from functions.user_functions import VideoDownloader

async def check(call: types.CallbackQuery):
    user = call.from_user
    markup = InlineKeyboardMarkup(row_width=1)
    try:
        ch_name = await bot.get_chat(channel_id)
        ch_link = ch_name.invite_link
        ch_name = ch_name.title
        button = InlineKeyboardButton(text=f'{ch_name}', url=ch_link)
        markup.add(button)
        user_status = await bot.get_chat_member(chat_id=channel_id, user_id=user.id)
    except ChatNotFound:
        for x in administrators:
            await bot.send_message(x, f'–ë–æ—Ç –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –∫–∞–Ω–∞–ª—É.')
        return

    markup.add(InlineKeyboardButton(text=translate_text('–ü—ñ–¥–ø–∏—Å–∞–≤—Å—è', user.id), callback_data='check'))
    message_text = translate_text("–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞, <b>–ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:</b>", user.id)

    if user_status.status == 'left':
        message_text = translate_text('‚ùå –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ!', user.id)
        await call.answer(message_text, show_alert=True)
        await call.message.edit_text(message_text, reply_markup=markup, disable_web_page_preview=True)
    else:
        message_text = translate_text('<b>‚úÖ –£—Å–ø—ñ—à–Ω–æ</b>', user.id)
        await call.message.edit_text(message_text)
        await asyncio.sleep(2)
        await call.message.edit_text(translate_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", user.id), reply_markup=get_start_keyboard(user.id))

@dp.callback_query_handler(text="statystic")
async def handle_statistics(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    stats = get_statistics(user_id)
    
    if stats:
        statistics_text = (f"<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—á—É–≤–∞–Ω—å:</b>\n\n"
                           f"<b>Instagram:</b> {stats['instagram']} \n"
                           f"<b>TikTok:</b> {stats['tiktok']} \n"
                           f"<b>YouTube Shorts:</b> {stats['youtube']} \n"
                           f"<b>Pinterest:</b> {stats['pinterest']} ")
    else:
        statistics_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞."

    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(statistics_text, parse_mode='HTML', reply_markup=get_back_keyboard(user_id))



@dp.callback_query_handler(text="help")
async def handle_help(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    
    help_text = (
        "<b>üí° –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "<b>1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞:</b>\n"
        "–©–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–¥—ñ–∞ –∑ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç –∞–±–æ –≤—ñ–¥–µ–æ. "
        "–ë–æ—Ç –ø—ñ–¥—Ç—Ä–∏–º—É—î –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏:\n"
        "  - Instagram\n"
        "  - TikTok\n"
        "  - YouTube Shorts\n"
        "  - Pinterest\n\n"
        "<b>2. –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n"
        "–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á—É–≤–∞–Ω—å, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'. "
        "–í–∏ –ø–æ–±–∞—á–∏—Ç–µ, —Å–∫—ñ–ª—å–∫–∏ –º–µ–¥—ñ–∞ –≤–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –∑ –∫–æ–∂–Ω–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏.\n\n"
        "<b>üì© –Ñ –ø–∏—Ç–∞–Ω–Ω—è?:</b>\n"
        "–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –≤ Telegram: "
        "@TeleBotsNowayrm"
    )

    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(help_text, parse_mode='HTML', reply_markup=get_back_keyboard(user_id))




@dp.callback_query_handler(IsSubscribed(), text="comunity")
async def handle_comunity(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    user_id = callback_query.from_user.id
    text = "–£—Å—ñ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∫–∞–Ω–∞–ª–∏ –∫–æ–º–∞–Ω–¥–∏ TeleBotsNowayrm –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏:"
    translated_text = translate_text(text, user_id)

    await callback_query.message.edit_text(translated_text, reply_markup=get_comunity_keyboard(user_id))


@dp.callback_query_handler(IsSubscribed(), text="download")
async def handle_download(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id

    text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–µ–¥—ñ–∞, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏:"
    translated_text = translate_text(text, user_id)

    await callback_query.message.edit_text(translated_text, reply_markup=get_back(user_id))
    await SupportStates.waiting_for_media_link.set()

@dp.message_handler(state=SupportStates.waiting_for_media_link, content_types=types.ContentType.TEXT)
async def handle_media_link(message: types.Message, state: FSMContext):
    media_url = message.text
    user_id = message.from_user.id
    
    await bot.send_chat_action(message.chat.id, action="typing")

    # Check which social media platform the link belongs to
    if "instagram.com" in media_url:
        result = await download_media_from_instagram(media_url, user_id)
        update_downloads(user_id, 'instagram')  # Update the database
    elif "tiktok.com" in media_url:
        result = await download_media_from_tiktok(media_url, user_id)
        update_downloads(user_id, 'tiktok')  # Update the database
    elif "youtube.com/shorts" in media_url:
        video_downloader = VideoDownloader()
        result = await video_downloader.download_media_from_youtube_shorts(media_url, user_id)
    # –ø–æ–¥–∞–ª—å—à–∞ –æ–±—Ä–æ–±–∫–∞ result
        update_downloads(user_id, 'youtube')  # Update the database
    elif "pin.it" in media_url or "pinterest.com" in media_url:
        result = await download_media_from_pinterest(media_url, user_id)
        update_downloads(user_id, 'pinterest')  # Update the database
    else:
        await message.answer("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ Instagram, TikTok, YouTube Shorts, Twitter –∞–±–æ Pinterest.")
        return

    if result:
        directory = result.get('dir')
        caption = result.get('caption', '')
        files = result.get('files', [])
        is_video = result.get('is_video', False)
        
        if not files:
            await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è.")
            return
        
        if len(files) == 1:
            file_path = files[0]
            if file_path.endswith(".mp4"):
                with open(file_path, 'rb') as video:
                    await message.answer_video(video=video)
            elif file_path.endswith((".jpg", ".jpeg", ".png")) and not is_video:
                with open(file_path, 'rb') as photo:
                    await message.answer_photo(photo=photo)
        else:
            # Prepare media group if there are multiple files
            media_group = []
            for file_path in files:
                if file_path.endswith(".mp4"):
                    media_group.append(InputMediaVideo(open(file_path, 'rb')))
                elif file_path.endswith((".jpg", ".jpeg", ".png")):
                    media_group.append(InputMediaPhoto(open(file_path, 'rb')))
            
            if media_group:
                await message.answer_media_group(media_group)
                
        if caption:
            await message.answer(caption)

        shutil.rmtree(directory)
        await asyncio.sleep(2)
        await message.answer(translate_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", user_id), reply_markup=get_start_keyboard(user_id))
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–¥—ñ–∞ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    await state.finish()

    
    
@dp.callback_query_handler(IsSubscribed(), text="settings")
async def handle_settings(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    user_id = callback_query.from_user.id
    language_keyboard = get_lang_keyboard(user_id)
    await callback_query.message.edit_text(
        translate_text("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", user_id),
        reply_markup=language_keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("set_lang_"))
async def handle_language_selection(callback_query: CallbackQuery):
    lang = callback_query.data.split("_")[2]
    user_id = callback_query.from_user.id

    update_user_language(user_id, lang)

    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(translate_text(f"–í–∏ –æ–±—Ä–∞–ª–∏ –º–æ–≤—É: {'–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞' if lang == 'uk' else '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞'}", user_id))
    await asyncio.sleep(2)
    await callback_query.message.edit_text(translate_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", user_id), reply_markup=get_start_keyboard(user_id))


    
@dp.callback_query_handler(text="back")
async def handle_back(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    await callback_query.message.edit_text(translate_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", user_id), reply_markup=get_start_keyboard(user_id))



@dp.callback_query_handler(IsSubscribed(), text="backck", state=SupportStates.waiting_for_media_link)
async def handle_back(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    await callback_query.message.edit_text(translate_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", user_id), reply_markup=get_start_keyboard(user_id))
    await state.finish()

    
def register_callbacks(dp: Dispatcher):
    dp.register_callback_query_handler(check, lambda c: c.data == 'check')

